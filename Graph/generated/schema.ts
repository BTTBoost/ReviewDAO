// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ListEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("whitelisted", Value.fromBoolean(false));
    this.set("baseUri", Value.fromString(""));
    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("stake", Value.fromBigInt(BigInt.zero()));
    this.set("challangerReward", Value.fromBigInt(BigInt.zero()));
    this.set("timer", Value.fromBigInt(BigInt.zero()));
    this.set("challangeId", Value.fromBigInt(BigInt.zero()));
    this.set("challanged", Value.fromBoolean(false));
    this.set("statusId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ListEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ListEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ListEntity", id.toString(), this);
    }
  }

  static load(id: string): ListEntity | null {
    return changetype<ListEntity | null>(store.get("ListEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get baseUri(): string {
    let value = this.get("baseUri");
    return value!.toString();
  }

  set baseUri(value: string) {
    this.set("baseUri", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get stake(): BigInt {
    let value = this.get("stake");
    return value!.toBigInt();
  }

  set stake(value: BigInt) {
    this.set("stake", Value.fromBigInt(value));
  }

  get challangerReward(): BigInt {
    let value = this.get("challangerReward");
    return value!.toBigInt();
  }

  set challangerReward(value: BigInt) {
    this.set("challangerReward", Value.fromBigInt(value));
  }

  get timer(): BigInt {
    let value = this.get("timer");
    return value!.toBigInt();
  }

  set timer(value: BigInt) {
    this.set("timer", Value.fromBigInt(value));
  }

  get challangeId(): BigInt {
    let value = this.get("challangeId");
    return value!.toBigInt();
  }

  set challangeId(value: BigInt) {
    this.set("challangeId", Value.fromBigInt(value));
  }

  get challanged(): boolean {
    let value = this.get("challanged");
    return value!.toBoolean();
  }

  set challanged(value: boolean) {
    this.set("challanged", Value.fromBoolean(value));
  }

  get statusId(): BigInt {
    let value = this.get("statusId");
    return value!.toBigInt();
  }

  set statusId(value: BigInt) {
    this.set("statusId", Value.fromBigInt(value));
  }
}

export class Challange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("challangerReward", Value.fromBigInt(BigInt.zero()));
    this.set("listingStake", Value.fromBigInt(BigInt.zero()));
    this.set("challangerStake", Value.fromBigInt(BigInt.zero()));
    this.set("votePrice", Value.fromBigInt(BigInt.zero()));
    this.set("timer", Value.fromBigInt(BigInt.zero()));
    this.set("challenger", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Challange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Challange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Challange", id.toString(), this);
    }
  }

  static load(id: string): Challange | null {
    return changetype<Challange | null>(store.get("Challange", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challangerReward(): BigInt {
    let value = this.get("challangerReward");
    return value!.toBigInt();
  }

  set challangerReward(value: BigInt) {
    this.set("challangerReward", Value.fromBigInt(value));
  }

  get listingStake(): BigInt {
    let value = this.get("listingStake");
    return value!.toBigInt();
  }

  set listingStake(value: BigInt) {
    this.set("listingStake", Value.fromBigInt(value));
  }

  get challangerStake(): BigInt {
    let value = this.get("challangerStake");
    return value!.toBigInt();
  }

  set challangerStake(value: BigInt) {
    this.set("challangerStake", Value.fromBigInt(value));
  }

  get votePrice(): BigInt {
    let value = this.get("votePrice");
    return value!.toBigInt();
  }

  set votePrice(value: BigInt) {
    this.set("votePrice", Value.fromBigInt(value));
  }

  get timer(): BigInt {
    let value = this.get("timer");
    return value!.toBigInt();
  }

  set timer(value: BigInt) {
    this.set("timer", Value.fromBigInt(value));
  }

  get challenger(): Bytes {
    let value = this.get("challenger");
    return value!.toBytes();
  }

  set challenger(value: Bytes) {
    this.set("challenger", Value.fromBytes(value));
  }
}

export class ListingStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("votes", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ListingStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ListingStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ListingStatus", id.toString(), this);
    }
  }

  static load(id: string): ListingStatus | null {
    return changetype<ListingStatus | null>(store.get("ListingStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}
